map <F4> :! . ~/ff/start_ftu.sh
map <F3> :e ~/ff/latestftulog 

command! -nargs=1 SS let @/ = '\V'.escape(<q-args>, '\')

set timeoutlen=50
" Set keystroke waiting time to 50 ms.

set t_TI= t_TE=
" To fix weired charater on Ubuntu.

set splitbelow
" Set terminal bottom


let &t_SI = "\e[6 q"
" Set cursor steady line in insert mode.
let &t_EI = "\e[2 q" 
" Set cursor steady block in normal mode.

"inoremap jj <esc>
inoremap jk <esc>
inoremap kj <esc>

let mapleader = "\<space>"
map <leader>i :e input.txt
map <leader>m :!make 

nnoremap ; :
nnoremap q1 :q!

set mouse=a

set tags=./tags;/
set clipboard=unnamed
set nocompatible " 關閉 vi 相容模式
set smartindent "當在大括號中間回車的時候，他會智慧縮排，因為他知道括號中間要縮排
set autoindent

set expandtab
syntax on " 自動語法高亮
set number " 顯示行號

set t_ti= t_te=     "關閉vim後，vim的內容依然顯示在terminal上
 
set shiftwidth=2 " 設定 << 和 >> 命令移動時的寬度為 4
set softtabstop=2 " 使得按退格鍵時可以一次刪掉 4 個空格
set tabstop=2 " 設定 tab 長度為 4

set nobackup " 覆蓋檔案時不備份
set autochdir " 自動切換當前目錄為當前檔案所在的目錄
set backupcopy=yes " 設定備份時的行為為覆蓋

" Search
set ignorecase smartcase " 搜尋時忽略大小寫，但在有一個或以上大寫字母時仍保持對大小寫敏感
set nowrapscan " 禁止在搜尋到檔案兩端時重新搜尋
set incsearch " 輸入搜尋內容時就顯示搜尋結果
set hlsearch " 搜尋時高亮顯示被找到的文字

set smartindent " 開啟新行時使用智慧自動縮排
set backspace=indent,eol,start

" Switch window
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
 
"******************************************************************************************************************

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
	filetype plugin indent on    " 必須載入vim自帶和外掛相應的語法和檔案型別相關指令碼

  Plugin 'tmsvg/pear-tree'
    " Default rules for matching:
    let g:pear_tree_pairs = {
                \ '(': {'closer': ')'},
                \ '[': {'closer': ']'},
                \ '{': {'closer': '}'},
                \ "'": {'closer': "'"},
                \ '"': {'closer': '"'}
                \ }
    " See pear-tree/after/ftplugin/ for filetype-specific matching rules

    " Pear Tree is enabled for all filetypes by default:
    let g:pear_tree_ft_disabled = []

    " Pair expansion is dot-repeatable by default:
    let g:pear_tree_repeatable_expand = 0

    " Smart pairs are disabled by default:
    let g:pear_tree_smart_openers = 0
    let g:pear_tree_smart_closers = 0
    let g:pear_tree_smart_backspace = 0

    " If enabled, smart pair functions timeout after 60ms:
    let g:pear_tree_timeout = 60

    " Automatically map <BS>, <CR>, and <Esc>
    let g:pear_tree_map_special_keys = 1

    " Default mappings:
    imap <BS> <Plug>(PearTreeBackspace)
    imap <CR> <Plug>(PearTreeExpand)
    imap <Esc> <Plug>(PearTreeFinishExpansion)
    " Pear Tree also makes <Plug> mappings for each opening and closing string.
    "     :help <Plug>(PearTreeOpener)
    "     :help <Plug>(PearTreeCloser)

    " Not mapped by default:
    " <Plug>(PearTreeSpace)
    " <Plug>(PearTreeJump)
    " <Plug>(PearTreeExpandOne)
    " <Plug>(PearTreeJNR)
    
	"vim包管理工具
	Plugin 'gmarik/Vundle.vim'
	"檔案目錄增加git 狀態
	Plugin 'Xuyuanp/nerdtree-git-plugin'
	
	"tab智慧補全
	Plugin 'ervandew/supertab'

	"彩虹括號
	Plugin 'kien/rainbow_parentheses.vim'
 
	"git左邊欄增刪改提示
	Plugin 'airblade/vim-gitgutter'
 

	"檔案目錄分屏
	Plugin 'scrooloose/nerdtree'
		let NERDTreeHighlightCursorline = 1       " 高亮當前行
		let NERDTreeShowLineNumbers     = 1       " 顯示行號
		" 忽略列表中的檔案
		let NERDTreeIgnore = [ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.egg$', '^\.git$', '^\.repo$', '^\.svn$', '^\.hg$' ]
		" 啟動 vim 時開啟 NERDTree
		"autocmd vimenter * NERDTree
		" 當開啟 VIM，沒有指定檔案時和開啟一個目錄時，開啟 NERDTree
		"autocmd StdinReadPre * let s:std_in = 1
		"autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
		"autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif
		" 關閉 NERDTree，當沒有檔案開啟的時候
		autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end
        
		" <leader>nt 開啟 nerdtree 視窗，在左側欄顯示
		nnoremap <leader>nt :NERDTreeToggle<CR>
		" <leader>tc 關閉當前的 tab
		nnoremap <leader>tc :tabc<CR>
		" <leader>to 關閉所有其他的 tab
		nnoremap <leader>to :tabo<CR>
		" <leader>ts 檢視所有開啟的 tab
		nnoremap <leader>ts :tabs<CR>
		" <leader>tp 前一個 tab
		nnoremap <leader>tp :tabp<CR>
		" <leader>tn 後一個 tab
		nnoremap <leader>tn :tabn<CR
     "狀態列
    Plugin 'vim-airline/vim-airline'
    Plugin 'vim-airline/vim-airline-themes'
 
        let g:airline_powerline_fonts = 1   " 使用powerline打過補丁的字型
        if !exists('g:airline_symbols')
            let g:airline_symbols = {}
        endif
        " 關閉當前 buffer
        "noremap <C-x> :w<CR>:bd<CR>
        "<leader>1~9 切到 buffer1~9
        nnoremap <leader>1 :b 1<CR>
        nnoremap <leader>2 :b 2<CR>
        nnoremap <leader>3 :b 3<CR>
        nnoremap <leader>4 :b 4<CR>
        nnoremap <leader>5 :b 5<CR>
        nnoremap <leader>6 :b 6<CR>
        nnoremap <leader>7 :b 7<CR>
        nnoremap <leader>8 :b 8<CR>
        nnoremap <leader>9 :b 9<CR>
 
        "Vim 在與螢幕/鍵盤互動時使用的編碼(取決於實際的終端的設定)        
        set encoding=utf-8
        set langmenu=zh_CN.UTF-8
        " 設定開啟檔案的編碼格式  
        set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1 
        set fileencoding=utf-8
        " 解決選單亂碼
        source $VIMRUNTIME/delmenu.vim
        source $VIMRUNTIME/menu.vim

        " 解決consle輸出亂碼
        " set termencoding = cp936  
        " 設定中文提示
        " language messages zh_CN.utf-8 
        " 設定中文幫助
        set helplang=cn
        " 設定為雙字寬顯示，否則無法完整顯示如:☆
        set ambiwidth=double

        " 總是顯示狀態列 
        let laststatus = 2
        " let g:airline_theme='solarized'      " 設定主題,simple、dark、solarized、bubblegum 詳見.vim/bundle/vim-airline-themes
        let g:airline_theme='papercolor'      " 設定主題,simple、dark、solarized、bubblegum 詳見.vim/bundle/vim-airline-themes
 
        " 開啟tabline
        let g:airline#extensions#tabline#enabled = 1      "tabline中當前
        let g:airline#extensions#tabline#left_sep = ' '   "buffer兩端的分隔字元
        let g:airline#extensions#tabline#left_alt_sep = '|'      "tabline中
        let g:airline#extensions#tabline#buffer_nr_show = 1      "buffer顯示編號
 
        " 對映切換buffer的鍵位
        nnoremap [b :bp<CR>
        nnoremap ]b :bn<CR>
        " 設定字型 
        set guifont=Powerline_Consolas:h14:cANSI
 
    Plugin 'enricobacis/vim-airline-clock'
        "let g:airline#extensions#clock#auto = 0  關閉
        let g:airline#extensions#clock#format = '%H:%M:%S'
    

    "顯示檔案修改痕跡
    Plugin 'chrisbra/changesPlugin'
    
    
    "json viewer
    Plugin 'elzr/vim-json'
 
    " vim script library 用法詳見src
    Plugin 'L9'
    "在needtree中顯示檔案圖示
    Plugin 'ryanoasis/vim-devicons'
 
    "查詢檔案
    Plugin 'junegunn/fzf'
        ":FZF 從當前目錄查詢
        ":FZF ~ 從home目錄查詢
        nnoremap <leader>f :FZF ~<CR>
        nnoremap <leader>F :FZF<CR>
 

    Plugin 'octol/vim-cpp-enhanced-highlight'
        
    Plugin 'Valloric/YouCompleteMe'
        "往前跳和往後跳的快捷鍵為Ctrl+O以及Ctrl+I
        let g:ycm_key_list_select_completion=['<c-n>']
        let g:ycm_key_list_previous_completion=['<c-p>']
        
        let g:ycm_auto_hover=''
        " Disable hint prompt.

        set completeopt=menu  "關閉preview window
        "let g:ycm_add_preview_to_completeopt =0
        "let g:ycm_autoclose_preview_window_after_completion=1
        "let g:ycm_autoclose_preview_window_after_insertion=1
        "let g:ycm_always_populate_location_list = 0
        "let g:ycm_confirm_extra_conf=0 "關閉載入.ycm_extra_conf.py提示
        let g:ycm_confirm_extra_conf='$HOME/.vim/bundle/YouCompleteMe/ycm_extra_conf.py' " C++ 20
        let g:ycm_collect_identifiers_from_tags_files=1 " 開啟 YCM 基於標籤引擎
        let g:ycm_min_num_of_chars_for_completion=1 " 從第1個鍵入字元就開始羅列匹配項
        let g:ycm_cache_omnifunc=0 " 禁止快取匹配項,每次都重新生成匹配項
        let g:ycm_seed_identifiers_with_syntax=1 " 語法關鍵字補全
         nnoremap <F5> :YcmForceCompileAndDiagnostics<CR> "force recomile with syntastic
        "nnoremap <leader>lo :lopen<CR> "open locationlist
        "nnoremap <leader>lc :lclose<CR>    "close locationlist
        "inoremap <leader><leader> <C-x><C-o>
        let g:ycm_complete_in_comments = 1 "在註釋輸入中也能補全
        let g:ycm_complete_in_strings = 1 "在字串輸入中也能補全
        let g:ycm_collect_identifiers_from_comments_and_strings = 0 "註釋和字串中的文字也會被收入補全
        let g:ycm_max_num_identifier_candidates = 50
        let g:ycm_auto_trigger = 1
        let g:ycm_error_symbol = '>>'
        let g:ycm_warning_symbol = '>'

call vundle#end()
