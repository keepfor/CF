{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
"sol.h": {
  "prefix": "j",
  "body": [
    "#include <bits/stdc++.h>",
    "",
    "using namespace std;",
    "",
    "#ifdef DEBUG",
    "#include \"lib/debug.h\"",
    "#else",
    "#define debug(...)",
    "#endif",
    "",
    "class Solver {",
    " public:",
    "  void Main() const;",
    "",
    " private:",
    "  void SetIO() const;",
    "  void Run() const;",
    "  void Solve() const;",
    "};",
    "",
    "void Solver::Solve() const {",
    "  using ll = long long;",
    "}",
    "",
    "void Solver::Run() const {",
    "  auto tt{1};",
    "  ${1}// cin >> tt;",
    "  while (tt--) {",
    "    Solve();",
    "  }",
    "}",
    "",
    "inline void Solver::SetIO() const { ",
    "  cin.tie(0)->sync_with_stdio(0); ",
    "}",
    "",
    "void Solver::Main() const {",
    "  SetIO();",
    "  Run();",
    "}",
    "",
    "signed main() {",
    "  Solver solver;",
    "  solver.Main();",
    "  return 0;",
    "}"
  ],
  "description": "sol.h"
}
}