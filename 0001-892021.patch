From bd015427329ef055774bedf325e49bc00febdbf5 Mon Sep 17 00:00:00 2001
From: jackcai <you@example.com>
Date: Mon, 9 Aug 2021 08:29:51 +0800
Subject: [PATCH] 892021

---
 input.txt   |  19 ++++++++--
 log.txt     |   7 ++--
 makefile    |   6 ++--
 meeting.txt |  52 +++++++++++++++++++++++++++
 output.txt  |   1 -
 reset.cc    |   7 ++++
 sol.cc      |   6 +---
 test.py     |  12 -------
 test.sh     |   4 ---
 tmp.c       |  72 -------------------------------------
 tmp.cpp     |  17 ---------
 tmp.java    | 101 ----------------------------------------------------
 tmp.py      |   0
 13 files changed, 85 insertions(+), 219 deletions(-)
 create mode 100644 meeting.txt
 create mode 100644 reset.cc
 delete mode 100644 test.py
 delete mode 100644 test.sh
 delete mode 100644 tmp.c
 delete mode 100644 tmp.cpp
 delete mode 100644 tmp.java
 delete mode 100644 tmp.py

diff --git a/input.txt b/input.txt
index c1fc319..759b9e7 100644
--- a/input.txt
+++ b/input.txt
@@ -1,3 +1,18 @@
-9
-1 2 1 3 2 2 2 2 3
+8
+6
+3 5 1 4 6 6
+3
+1 2 3
+4
+1 3 3 4
+6
+1 6 3 4 5 6
+6
+3 5 1 4 6 6
+3
+1 2 3
+4
+1 3 3 4
+6
+1 6 3 4 5 6
 
diff --git a/log.txt b/log.txt
index 624a859..f2ba8f5 100644
--- a/log.txt
+++ b/log.txt
@@ -1,2 +1,5 @@
-1100
-
+0700
+1254
+1515
+1607
+1700
diff --git a/makefile b/makefile
index 3d84ce8..e12132e 100644
--- a/makefile
+++ b/makefile
@@ -1,6 +1,6 @@
 CC=clang++
 
-.PHONY: initialize
+.PHONY: resete
 
 all: clear sol.o main copy clean
 	
@@ -20,5 +20,5 @@ clean:
 copy:
 	cp sol.cc last.cc
 
-initialize:
-	cp ini.cc sol.cc
+reset:
+	cp reset.cc sol.cc
diff --git a/meeting.txt b/meeting.txt
new file mode 100644
index 0000000..257e4ac
--- /dev/null
+++ b/meeting.txt
@@ -0,0 +1,52 @@
+[US-XG-16]
+1. Released FCD.
+-First edition of Python FCD.
+-Add mdk_drv for UBOOT networking.
+
+[USW-LITE][US-Gen-1]
+1. Released FCD, support sha256sum check with latest bundled FW.
+2. Add *US-8, *US-24-500W, *US-48-750W for US-Gen-1.
+
+[UA-Elevator]
+1. Released FCD with latest bundled FW.
+
+[USW-Pro-Series][USW-Pro-Aggregation]
+1. Released FCD, support retry of LCM touch count with latest bundled FW.
+
+[USW-Enterprise-24-PoE]
+1. Released FCD, fixed LCM touch overheat issue with latest bundled FW.
+
+[LVDU-24]
+1. Released FCD with latest bundled FW.
+2. Released FTU,
+-Support check Bottom/Up 12 ports, for ID Resistor Check (5k, 15k, 20k) test, RGBW PWN test, Power consumption test and LED test.
+-Add Fan test, MCU test, Lead Acid Battery test and LCM pattern test.
+-Remove MCU test and BT test.
+
+[LVDU-4]
+1. Released FCD/FTU with latest bundled FW.
+
+[UISP-P-Pro]
+1. Verified FCD for reworked HW.
+
+[UF-WIFI-6]
+1. Released FCD for EA build.
+
+[USW-Enterprise-8-PoE]
+1. Released FCD, fixed misjudging of burnin test with lastest bundled FW.
+2. ISSUE from FXN,
+-RPi4 FCD web was freezed when 100%.
+-SFP ports LEDs do not work.
+-Remove Reset Button.
+-Support 10G port link test.
+-Burnin misjudging.
+
+====================================================================
+[USW-Enterprise-8-PoE]
+1. FTU update for FXN.
+
+[UISP-P][UISP-P-Pro]
+1. FTU, pended by Test_plan/FW/CMD.
+
+[UF-WIFI6]
+1. FTU, pended by Test_plan/FW/CMD.
diff --git a/output.txt b/output.txt
index f599e28..e69de29 100644
--- a/output.txt
+++ b/output.txt
@@ -1 +0,0 @@
-10
diff --git a/reset.cc b/reset.cc
new file mode 100644
index 0000000..079fe1a
--- /dev/null
+++ b/reset.cc
@@ -0,0 +1,7 @@
+#include<bits/stdc++.h>
+using namespace std;
+int32_t main() {
+    ios::sync_with_stdio(false);
+    cin.tie(0);
+    return 0;
+}
diff --git a/sol.cc b/sol.cc
index b45abe7..079fe1a 100644
--- a/sol.cc
+++ b/sol.cc
@@ -1,11 +1,7 @@
 #include<bits/stdc++.h>
 using namespace std;
-const int N = 1e5 + 1;
-int cnt[N];
 int32_t main() {
     ios::sync_with_stdio(false);
-    in.tie(0);
-    
+    cin.tie(0);
     return 0;
 }
-    
diff --git a/test.py b/test.py
deleted file mode 100644
index 55bb8ce..0000000
--- a/test.py
+++ /dev/null
@@ -1,12 +0,0 @@
-def do():
-    with open("/tmp/ubnt_burnin_log", "rb") as file:
-         data = file.read(8)
-
-    print(data)
-    
-    with open("/tmp/out.txt", "w") as f:
-        f.write(" ".join(map(str,data)))
-        f.write("\n")
-
-if __name__ == "__main__":
-    do()
\ No newline at end of file
diff --git a/test.sh b/test.sh
deleted file mode 100644
index 4973ded..0000000
--- a/test.sh
+++ /dev/null
@@ -1,4 +0,0 @@
-for i in {1..3}
-do
-   echo "Welcome $i times"
-done
diff --git a/tmp.c b/tmp.c
deleted file mode 100644
index 7d41818..0000000
--- a/tmp.c
+++ /dev/null
@@ -1,72 +0,0 @@
-
-const int MAXN = 100005;
-
-struct SuffixAutomaton {
-	map<int,int> ch[MAXN << 1];
-    int last, tot, nxt[MAXN << 1], len[MAXN << 1];
-    SuffixAutomaton() {
-        last = tot = 1;
-    }
-    inline void extend(int c) {
-        int u = ++tot, v = last; 
-        len[u] = len[v] + 1;
-        for(; v && !ch[v][c]; v = nxt[v]) ch[v][c] = u;
-        if(!v) {
-            nxt[u] = 1;
-        } else if(len[ch[v][c]] == len[v] + 1) {
-            nxt[u] = ch[v][c];
-        } else {
-            int n = ++tot, o = ch[v][c]; len[n] = len[v] + 1;
-            ch[n]= ch[o];
-            nxt[n] = nxt[o]; nxt[o] = nxt[u] = n;
-            for(; v && ch[v][c] == o; v = nxt[v]) ch[v][c] = n;
-        }
-        last = u;
-    } 
-} sam;
-
-int a[MAXN << 1], c[MAXN << 1], mx[MAXN << 1], ans[MAXN << 1];
-
-class Solution {
-public:
-    int longestCommonSubpath(int n, vector<vector<int>>& paths) {
-	    memset(ans, 0x3f, sizeof(ans));
-	    memset(a, 0, sizeof(a));
-	    memset(c, 0, sizeof(a));
-	    memset(mx, 0, sizeof(a));
-	    for(int i=0;i<MAXN<<1;i++)sam.ch[i].clear();
-	    sam.last = sam.tot = 1;
-	    memset(sam.nxt, 0, sizeof(a));
-	    memset(sam.len, 0, sizeof(a));
-	    for(int i = 0; i<paths[0].size(); i++) {
-	        sam.extend(paths[0][i]);
-	    }
-	    for(int i = 1; i <= sam.tot; i++) c[sam.len[i]]++;
-	    for(int i = 1; i <= sam.tot; i++) c[i] += c[i - 1];
-	    for(int i = 1; i <= sam.tot; i++) a[c[sam.len[i]]--] = i;
-	    for(int j = 1;j<paths.size();j++){
-	        int len = 0, p = 1, c; 
-	        for(int i = 0; i<paths[j].size(); i++) {
-	            c = paths[j][i];
-	            while(p && !sam.ch[p][c]) {
-	                p = sam.nxt[p]; len = sam.len[p];
-	            }
-	            if(p) {
-	                len++; p = sam.ch[p][c]; mx[p] = std::max(mx[p], len);
-	            } else {
-	                p = 1; len = 0;
-	            }
-	        }
-	        for(int i = sam.tot; i; i--) {
-	            int p = a[i];
-	            mx[sam.nxt[p]] = std::max(mx[sam.nxt[p]], std::min(mx[p], sam.len[sam.nxt[p]]));
-	            ans[p] = std::min(ans[p], mx[p]); mx[p] = 0;
-	        }
-	    }
-	    int res = 0;
-	    for(int i = 1; i <= sam.tot; i++) {
-	        res = std::max(res, ans[i]);
-	    }
-	    return res;
-    }
-};
\ No newline at end of file
diff --git a/tmp.cpp b/tmp.cpp
deleted file mode 100644
index 57665ef..0000000
--- a/tmp.cpp
+++ /dev/null
@@ -1,17 +0,0 @@
-class Solution {
-public:
-    string removeOccurrences(string s, string part) {
-        string ans;
-        for (auto c : s) {
-            ans += c;
-            if (ans.size() > part.size()) {
-                int sz = ans.size() - part.size();
-                string t = ans.substr(sz);
-                if (t == part) {
-                    ans.resize(sz);
-                }
-            }
-        }      
-        return ans;
-    }
-};
\ No newline at end of file
diff --git a/tmp.java b/tmp.java
deleted file mode 100644
index b3ecfce..0000000
--- a/tmp.java
+++ /dev/null
@@ -1,101 +0,0 @@
-	class Solution {
-		public int waysToBuildRooms(int[] par) {
-			int[][] g = parentToG(par);
-			int n = par.length;
-			int[][] pars = parents(g, 0);
-
-			final int mod = 1000000007;
-			int[] ord = pars[1];
-			int[][] fif = enumFIF(200000, mod);
-			int[] des = new int[n];
-			long ans = 1;
-			for(int i = n-1;i >= 0;i--){
-				int cur = ord[i];
-				des[cur]++;
-				for(int e : g[cur]){
-					if(par[cur] == e)continue;
-					des[cur] += des[e];
-					ans = ans * fif[1][des[e]] % mod;
-				}
-				ans = ans * fif[0][des[cur]-1] % mod;
-			}
-			return (int)ans;
-		}
-
-
-		public int[][] enumFIF(int n, int mod) {
-			int[] f = new int[n + 1];
-			int[] invf = new int[n + 1];
-			f[0] = 1;
-			for (int i = 1; i <= n; i++) {
-				f[i] = (int) ((long) f[i - 1] * i % mod);
-			}
-			long a = f[n];
-			long b = mod;
-			long p = 1, q = 0;
-			while (b > 0) {
-				long c = a / b;
-				long d;
-				d = a;
-				a = b;
-				b = d % b;
-				d = p;
-				p = q;
-				q = d - c * q;
-			}
-			invf[n] = (int) (p < 0 ? p + mod : p);
-			for (int i = n - 1; i >= 0; i--) {
-				invf[i] = (int) ((long) invf[i + 1] * (i + 1) % mod);
-			}
-			return new int[][]{f, invf};
-		}
-
-
-		int[][] parents(int[][] g, int root) {
-			int n = g.length;
-			int[] par = new int[n];
-			Arrays.fill(par, -1);
-
-			int[] depth = new int[n];
-			depth[0] = 0;
-
-			int[] q = new int[n];
-			q[0] = root;
-			for (int p = 0, r = 1; p < r; p++) {
-				int cur = q[p];
-				for (int nex : g[cur]) {
-					if (par[cur] != nex) {
-						q[r++] = nex;
-						par[nex] = cur;
-						depth[nex] = depth[cur] + 1;
-					}
-				}
-			}
-			return new int[][]{par, q, depth};
-		}
-
-
-		public int[][] parentToG(int[] par)
-		{
-			int n = par.length;
-			int[] ct = new int[n];
-			for(int i = 0;i < n;i++){
-				if(par[i] >= 0){
-					ct[i]++;
-					ct[par[i]]++;
-				}
-			}
-			int[][] g = new int[n][];
-			for(int i = 0;i < n;i++){
-				g[i] = new int[ct[i]];
-			}
-			for(int i = 0;i < n;i++){
-				if(par[i] >= 0){
-					g[par[i]][--ct[par[i]]] = i;
-					g[i][--ct[i]] = par[i];
-				}
-			}
-			return g;
-		}
-
-	}
\ No newline at end of file
diff --git a/tmp.py b/tmp.py
deleted file mode 100644
index e69de29..0000000
-- 
2.17.1

