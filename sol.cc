#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <chrono>
#include <cmath>
#include <complex>
#include <deque>
#include <forward_list>
#include <fstream>
#include <functional>
#include <iomanip>
#include <ios>
#include <iostream>
#include <limits>
#include <list>
#include <map>
#include <memory>
#include <numeric>
#include <optional>
#include <queue>
#include <random>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <type_traits>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <vector>
using namespace std;
using lint = long long;
using pint = pair<int, int>;
using plint = pair<lint, lint>;
struct fast_ios { fast_ios(){ cin.tie(nullptr), ios::sync_with_stdio(false), cout << fixed << setprecision(20); }; } fast_ios_;
#define ALL(x) (x).begin(), (x).end()
#define FOR(i, begin, end) for(int i=(begin),i##_end_=(end);i<i##_end_;i++)
#define IFOR(i, begin, end) for(int i=(end)-1,i##_begin_=(begin);i>=i##_begin_;i--)
#define REP(i, n) FOR(i,0,n)
#define IREP(i, n) IFOR(i,0,n)
template <typename T> bool chmax(T &m, const T q) { return m < q ? (m = q, true) : false; }
template <typename T> bool chmin(T &m, const T q) { return m > q ? (m = q, true) : false; }
const std::vector<std::pair<int, int>> grid_dxs{{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
int floor_lg(long long x) { return x <= 0 ? -1 : 63 - __builtin_clzll(x); }
template <class T1, class T2> T1 floor_div(T1 num, T2 den) { return (num > 0 ? num / den : -((-num + den - 1) / den)); }
template <class T1, class T2> std::pair<T1, T2> operator+(const std::pair<T1, T2> &l, const std::pair<T1, T2> &r) { return std::make_pair(l.first + r.first, l.second + r.second); }
template <class T1, class T2> std::pair<T1, T2> operator-(const std::pair<T1, T2> &l, const std::pair<T1, T2> &r) { return std::make_pair(l.first - r.first, l.second - r.second); }
template <class T> std::vector<T> sort_unique(std::vector<T> vec) { sort(vec.begin(), vec.end()), vec.erase(unique(vec.begin(), vec.end()), vec.end()); return vec; }
template <class T> int arglb(const std::vector<T> &v, const T &x) { return std::distance(v.begin(), std::lower_bound(v.begin(), v.end(), x)); }
template <class T> int argub(const std::vector<T> &v, const T &x) { return std::distance(v.begin(), std::upper_bound(v.begin(), v.end(), x)); }
template <class IStream, class T> IStream &operator>>(IStream &is, std::vector<T> &vec) { for (auto &v : vec) is >> v; return is; }

template <class OStream, class T> OStream &operator<<(OStream &os, const std::vector<T> &vec);
template <class OStream, class T, size_t sz> OStream &operator<<(OStream &os, const std::array<T, sz> &arr);
template <class OStream, class T, class TH> OStream &operator<<(OStream &os, const std::unordered_set<T, TH> &vec);
template <class OStream, class T, class U> OStream &operator<<(OStream &os, const pair<T, U> &pa);
template <class OStream, class T> OStream &operator<<(OStream &os, const std::deque<T> &vec);
template <class OStream, class T> OStream &operator<<(OStream &os, const std::set<T> &vec);
template <class OStream, class T> OStream &operator<<(OStream &os, const std::multiset<T> &vec);
template <class OStream, class T> OStream &operator<<(OStream &os, const std::unordered_multiset<T> &vec);
template <class OStream, class T, class U> OStream &operator<<(OStream &os, const std::pair<T, U> &pa);
template <class OStream, class TK, class TV> OStream &operator<<(OStream &os, const std::map<TK, TV> &mp);
template <class OStream, class TK, class TV, class TH> OStream &operator<<(OStream &os, const std::unordered_map<TK, TV, TH> &mp);
template <class OStream, class... T> OStream &operator<<(OStream &os, const std::tuple<T...> &tpl);

template <class OStream, class T> OStream &operator<<(OStream &os, const std::vector<T> &vec) { os << '['; for (auto v : vec) os << v << ','; os << ']'; return os; }
template <class OStream, class T, size_t sz> OStream &operator<<(OStream &os, const std::array<T, sz> &arr) { os << '['; for (auto v : arr) os << v << ','; os << ']'; return os; }
template <class... T> std::istream &operator>>(std::istream &is, std::tuple<T...> &tpl) { std::apply([&is](auto &&... args) { ((is >> args), ...);}, tpl); return is; }
template <class OStream, class... T> OStream &operator<<(OStream &os, const std::tuple<T...> &tpl) { os << '('; std::apply([&os](auto &&... args) { ((os << args << ','), ...);}, tpl); return os << ')'; }
template <class OStream, class T, class TH> OStream &operator<<(OStream &os, const std::unordered_set<T, TH> &vec) { os << '{'; for (auto v : vec) os << v << ','; os << '}'; return os; }
template <class OStream, class T> OStream &operator<<(OStream &os, const std::deque<T> &vec) { os << "deq["; for (auto v : vec) os << v << ','; os << ']'; return os; }
template <class OStream, class T> OStream &operator<<(OStream &os, const std::set<T> &vec) { os << '{'; for (auto v : vec) os << v << ','; os << '}'; return os; }
template <class OStream, class T> OStream &operator<<(OStream &os, const std::multiset<T> &vec) { os << '{'; for (auto v : vec) os << v << ','; os << '}'; return os; }
template <class OStream, class T> OStream &operator<<(OStream &os, const std::unordered_multiset<T> &vec) { os << '{'; for (auto v : vec) os << v << ','; os << '}'; return os; }
template <class OStream, class T, class U> OStream &operator<<(OStream &os, const std::pair<T, U> &pa) { return os << '(' << pa.first << ',' << pa.second << ')'; }
template <class OStream, class TK, class TV> OStream &operator<<(OStream &os, const std::map<TK, TV> &mp) { os << '{'; for (auto v : mp) os << v.first << "=>" << v.second << ','; os << '}'; return os; }
template <class OStream, class TK, class TV, class TH> OStream &operator<<(OStream &os, const std::unordered_map<TK, TV, TH> &mp) { os << '{'; for (auto v : mp) os << v.first << "=>" << v.second << ','; os << '}'; return os; }
#ifdef HITONANODE_LOCAL
const string COLOR_RESET = "\033[0m", BRIGHT_GREEN = "\033[1;32m", BRIGHT_RED = "\033[1;31m", BRIGHT_CYAN = "\033[1;36m", NORMAL_CROSSED = "\033[0;9;37m", RED_BACKGROUND = "\033[1;41m", NORMAL_FAINT = "\033[0;2m";
#define dbg(x) std::cerr << BRIGHT_CYAN << #x << COLOR_RESET << " = " << (x) << NORMAL_FAINT << " (L" << __LINE__ << ") " << __FILE__ << COLOR_RESET << std::endl
#define dbgif(cond, x) ((cond) ? std::cerr << BRIGHT_CYAN << #x << COLOR_RESET << " = " << (x) << NORMAL_FAINT << " (L" << __LINE__ << ") " << __FILE__ << COLOR_RESET << std::endl : std::cerr)
#else
#define dbg(x) ((void)0)
#define dbgif(cond, x) ((void)0)
#endif


struct rand_int_ {
    using lint = long long;
    std::mt19937 mt;
    // rand_int_() : mt(std::chrono::steady_clock::now().time_since_epoch().count()) {}
    rand_int_() : mt(0) {}
    lint operator()(lint x) { return this->operator()(0, x); } // [0, x)
    lint operator()(lint l, lint r) {
        std::uniform_int_distribution<lint> d(l, r - 1);
        return d(mt);
    }
} rnd;

vector<vector<vector<int>>> gen_orders() {
    set<vector<vector<int>>> ranks;
    // vector<double> se;
    vector<lint> vals(5);

    const int UB = 30;
    FOR(a0, 1, UB + 1) {
        FOR(a1, a0, UB + 1) {
            FOR(a2, a1, UB + 1) {
                FOR(a3, a2, UB + 1) {
                    FOR(a4, a3, UB + 1) {
                        vals = {a0, a1, a2, a3, a4};

                        vector<plint> se;
                        REP(S, 1 << 5) {
                            lint sum = 0;
                            REP(i, 5) {
                                if ((S >> i) & 1) sum += vals.at(i);
                            }
                            se.emplace_back(sum, S);
                        }
                        sort(ALL(se));
                        vector<vector<int>> seq;
                        lint last_score = -1;
                        for (auto [k, v] : se) {
                            if (chmax(last_score, k)) {
                                seq.push_back({});
                            }
                            seq.back().push_back(v);
                            // seq.push_back(v);
                        }
                        if (!ranks.count(seq)) {
                            ranks.insert(seq);
                            // dbg(make_tuple(seq, ranks.size()));
                        }
                    }
                }
            }
        }
    }
    // REP(_, 1 << 30) {
    //     REP(i, 5) vals.at(i) = rnd(1, 1LL << 50);
    //     sort(ALL(vals));

    //     vector<plint> se;
    //     REP(S, 1 << 5) {
    //         lint sum = 0;
    //         REP(i, 5) {
    //             if ((S >> i) & 1) sum += vals.at(i);
    //         }
    //         se.emplace_back(sum, S);
    //     }
    //     sort(ALL(se));
    //     vector<int> seq;
    //     for (auto [k, v] : se) seq.push_back(v);
    //     if (!ranks.count(seq)) {
    //         ranks.insert(seq);
    //         dbg(make_tuple(_, seq, ranks.size()));
    //     }

    //     if (ranks.size() > 515) break;
    // }

    return {ranks.cbegin(), ranks.cend()};
}

vector<vector<vector<int>>> erase(const vector<vector<vector<int>>> &seq) {
    const int N = seq.size();
    vector<int> to_delete(N);
    REP(i, N) REP(j, N) {
        if (i == j) continue;

        bool is_included = true;

        const vector<vector<int>> &l = seq.at(i);
        const vector<vector<int>> &r = seq.at(j);

        int cur = 0;

        REP(i, l.size()) {
            vector<int> rtmp;
            int rem_size = l.at(i).size();
            while (rem_size > 0) {
                rem_size -= (int)r.at(cur).size();
                rtmp.insert(rtmp.end(), r.at(cur).begin(), r.at(cur).end());
                ++cur;
            }

            sort(ALL(rtmp));

            if (l.at(i) != rtmp) {
                is_included = false;
                break;
            }
        }

        if (is_included) {
            // dbg(make_tuple(l, r));
            to_delete.at(j) = true;
        }
    }

    // dbg(to_delete);

    vector<vector<vector<int>>> ret;
    REP(i, N) {
        if (!to_delete.at(i)) ret.push_back(seq.at(i));
    }

    return ret;
}

int main() {
    // auto orders = gen_orders();
    // dbg(orders.size());
    // orders = erase(orders);

    vector<vector<vector<int>>> orders_{{{0}, {1}, {2}, {3}, {4}, {5}, {6}, {7, 8}, {9}, {10}, {11, 16}, {12, 17}, {13, 18}, {14, 19}, {15, 20}, {21}, {22}, {23, 24}, {25}, {26}, {27}, {28}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {3}, {4}, {5}, {6}, {7, 8}, {9, 16}, {10, 17}, {11, 18}, {12, 19}, {13, 20}, {14, 21}, {15, 22}, {23, 24}, {25}, {26}, {27}, {28}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {3}, {4}, {5}, {6, 8}, {7, 9}, {10}, {11, 16}, {12, 17}, {13, 18}, {14, 19}, {15, 20}, {21}, {22, 24}, {23, 25}, {26}, {27}, {28}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {3}, {4}, {5}, {6, 8}, {7, 9, 16}, {10, 17}, {11, 18}, {12, 19}, {13, 20}, {14, 21}, {15, 22, 24}, {23, 25}, {26}, {27}, {28}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {3}, {4}, {5}, {8}, {6, 9}, {7, 16}, {10, 17}, {11}, {12, 18}, {13, 19}, {20}, {14, 21}, {15, 24}, {22, 25}, {23}, {26}, {27}, {28}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {3}, {4}, {5}, {8}, {6, 9}, {7, 16}, {10, 17}, {11}, {18}, {12, 19}, {13}, {20}, {14, 21}, {15, 24}, {22, 25}, {23}, {26}, {27}, {28}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {3}, {4}, {5, 8}, {6, 9}, {7, 10}, {11, 16}, {12, 17}, {13, 18}, {14, 19}, {15, 20}, {21, 24}, {22, 25}, {23, 26}, {27}, {28}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {3}, {4}, {5, 8}, {6, 9}, {7, 10}, {11, 16}, {17}, {12, 18}, {13, 19}, {14}, {15, 20}, {21, 24}, {22, 25}, {23, 26}, {27}, {28}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {3}, {4}, {5, 8}, {6, 9}, {7, 10}, {11, 16}, {17}, {18}, {12, 19}, {13}, {14}, {15, 20}, {21, 24}, {22, 25}, {23, 26}, {27}, {28}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {3}, {4}, {5, 8}, {6, 9}, {7, 10, 16}, {11, 17}, {12, 18}, {13, 19}, {14, 20}, {15, 21, 24}, {22, 25}, {23, 26}, {27}, {28}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {3}, {4}, {5, 8}, {6, 9}, {7, 10, 16}, {11, 17}, {18}, {12, 19}, {13}, {14, 20}, {15, 21, 24}, {22, 25}, {23, 26}, {27}, {28}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {3}, {4}, {5, 8}, {6, 9, 16}, {7, 10, 17}, {11, 18}, {12, 19}, {13, 20}, {14, 21, 24}, {15, 22, 25}, {23, 26}, {27}, {28}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {3}, {4}, {5, 8}, {9, 16}, {6, 17}, {7, 10}, {11, 18}, {12, 19}, {13, 20}, {21, 24}, {14, 25}, {15, 22}, {23, 26}, {27}, {28}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {3}, {4}, {8}, {5, 16}, {6, 9}, {10, 17}, {7, 18}, {11}, {12, 19}, {20}, {13, 24}, {14, 21}, {22, 25}, {15, 26}, {23}, {27}, {28}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {3}, {4, 8}, {5, 9}, {6, 10}, {7, 11, 16}, {12, 17}, {13, 18}, {14, 19}, {15, 20, 24}, {21, 25}, {22, 26}, {23, 27}, {28}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {3}, {4, 8}, {5, 9, 16}, {6, 10, 17}, {7, 11, 18}, {12, 19}, {13, 20, 24}, {14, 21, 25}, {15, 22, 26}, {23, 27}, {28}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {3, 4}, {5}, {6}, {7, 8}, {9}, {10}, {11, 12}, {13, 16}, {14, 17}, {15, 18}, {19, 20}, {21}, {22}, {23, 24}, {25}, {26}, {27, 28}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {3, 4}, {5}, {6}, {7, 8}, {9}, {10, 16}, {11, 12, 17}, {13, 18}, {14, 19, 20}, {15, 21}, {22}, {23, 24}, {25}, {26}, {27, 28}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {3, 4}, {5}, {6}, {7, 8}, {9}, {16}, {10, 17}, {11, 12}, {13, 18}, {19, 20}, {14, 21}, {15}, {22}, {23, 24}, {25}, {26}, {27, 28}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {3, 4}, {5}, {6}, {7, 8}, {9, 16}, {10, 17}, {11, 12, 18}, {13, 19, 20}, {14, 21}, {15, 22}, {23, 24}, {25}, {26}, {27, 28}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {3, 4}, {5}, {6, 8}, {7, 9}, {10}, {11, 12}, {13, 16}, {14, 17}, {15, 18}, {19, 20}, {21}, {22, 24}, {23, 25}, {26}, {27, 28}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {3, 4}, {5}, {6, 8}, {7, 9}, {10, 16}, {11, 12, 17}, {13, 18}, {14, 19, 20}, {15, 21}, {22, 24}, {23, 25}, {26}, {27, 28}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {3, 4}, {5}, {6, 8}, {7, 9}, {16}, {10, 17}, {11, 12}, {13, 18}, {19, 20}, {14, 21}, {15}, {22, 24}, {23, 25}, {26}, {27, 28}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {3, 4}, {5}, {6, 8}, {7, 9, 16}, {10, 17}, {11, 12, 18}, {13, 19, 20}, {14, 21}, {15, 22, 24}, {23, 25}, {26}, {27, 28}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {3, 4}, {5}, {8}, {6, 9}, {7, 16}, {10, 17}, {11, 12}, {13, 18}, {19, 20}, {14, 21}, {15, 24}, {22, 25}, {23}, {26}, {27, 28}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {3, 4}, {5, 8}, {6, 9}, {7, 10}, {11, 12}, {13}, {14}, {15, 16}, {17}, {18}, {19, 20}, {21, 24}, {22, 25}, {23, 26}, {27, 28}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {3, 4}, {5, 8}, {6, 9}, {7, 10}, {11, 12}, {13}, {14, 16}, {15, 17}, {18}, {19, 20}, {21, 24}, {22, 25}, {23, 26}, {27, 28}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {3, 4}, {5, 8}, {6, 9}, {7, 10}, {11, 12}, {13, 16}, {14, 17}, {15, 18}, {19, 20}, {21, 24}, {22, 25}, {23, 26}, {27, 28}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {3, 4}, {5, 8}, {6, 9}, {7, 10}, {11, 12, 16}, {13, 17}, {14, 18}, {15, 19, 20}, {21, 24}, {22, 25}, {23, 26}, {27, 28}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {3, 4}, {5, 8}, {6, 9}, {7, 10, 16}, {11, 12, 17}, {13, 18}, {14, 19, 20}, {15, 21, 24}, {22, 25}, {23, 26}, {27, 28}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {3, 4}, {5, 8}, {6, 9, 16}, {7, 10, 17}, {11, 12, 18}, {13, 19, 20}, {14, 21, 24}, {15, 22, 25}, {23, 26}, {27, 28}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {3, 4}, {5, 8}, {9}, {6, 16}, {7, 10, 17}, {11, 12}, {13, 18}, {19, 20}, {14, 21, 24}, {15, 25}, {22}, {23, 26}, {27, 28}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {3, 4}, {5, 8}, {9}, {16}, {6, 17}, {7, 10}, {11, 12}, {13, 18}, {19, 20}, {21, 24}, {14, 25}, {15}, {22}, {23, 26}, {27, 28}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {3, 4}, {5, 8}, {9, 16}, {6, 17}, {7, 10}, {11, 12, 18}, {13, 19, 20}, {21, 24}, {14, 25}, {15, 22}, {23, 26}, {27, 28}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {3, 4}, {5, 8, 16}, {6, 9, 17}, {7, 10, 18}, {11, 12, 19, 20}, {13, 21, 24}, {14, 22, 25}, {15, 23, 26}, {27, 28}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {3, 4}, {8}, {5, 16}, {6, 9}, {10, 17}, {7, 18}, {11, 12}, {19, 20}, {13, 24}, {14, 21}, {22, 25}, {15, 26}, {23}, {27, 28}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {3, 4, 8}, {5, 9}, {6, 10}, {7, 11, 12}, {13, 16}, {14, 17}, {15, 18}, {19, 20, 24}, {21, 25}, {22, 26}, {23, 27, 28}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {3, 4, 8}, {5, 9}, {6, 10, 16}, {7, 11, 12, 17}, {13, 18}, {14, 19, 20, 24}, {15, 21, 25}, {22, 26}, {23, 27, 28}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {3, 4, 8}, {5, 9}, {16}, {6, 10, 17}, {7, 11, 12}, {13, 18}, {19, 20, 24}, {14, 21, 25}, {15}, {22, 26}, {23, 27, 28}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {3, 4, 8}, {5, 9, 16}, {6, 10, 17}, {7, 11, 12, 18}, {13, 19, 20, 24}, {14, 21, 25}, {15, 22, 26}, {23, 27, 28}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {4}, {3}, {5}, {6}, {7, 8}, {16}, {9}, {10, 17}, {12, 18}, {11, 20}, {13, 19}, {14, 21}, {22}, {15}, {23, 24}, {25}, {26}, {28}, {27}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {4}, {3}, {5}, {6}, {8}, {7, 16}, {9}, {10, 17}, {12, 18}, {11, 20}, {13, 19}, {14, 21}, {22}, {15, 24}, {23}, {25}, {26}, {28}, {27}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {4}, {3}, {5}, {6, 8}, {16}, {7, 9}, {10, 17}, {12, 18}, {11, 20}, {13, 19}, {14, 21}, {22, 24}, {15}, {23, 25}, {26}, {28}, {27}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {4}, {3}, {5, 8}, {6, 16}, {9}, {7, 10, 17}, {12, 18}, {11, 20}, {13, 19}, {14, 21, 24}, {22}, {15, 25}, {23, 26}, {28}, {27}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {4}, {3}, {5, 8}, {16}, {6, 9}, {17}, {7, 10}, {12, 18}, {11, 20}, {13, 19}, {21, 24}, {14}, {22, 25}, {15}, {23, 26}, {28}, {27}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {4}, {3}, {5, 8}, {16}, {9}, {6, 17}, {7, 10}, {12, 18}, {11, 20}, {13, 19}, {21, 24}, {14, 25}, {22}, {15}, {23, 26}, {28}, {27}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {4}, {3, 8}, {5}, {6, 9}, {10, 16}, {7, 12}, {11, 17}, {13, 18}, {14, 20}, {19, 24}, {15, 21}, {22, 25}, {26}, {23, 28}, {27}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {4}, {3, 8}, {5, 16}, {6, 9}, {10, 17}, {7, 12, 18}, {11, 20}, {13, 19, 24}, {14, 21}, {22, 25}, {15, 26}, {23, 28}, {27}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {4}, {3, 8}, {5, 16}, {9}, {6, 17}, {10}, {7, 12, 18}, {11, 20}, {13, 19, 24}, {21}, {14, 25}, {22}, {15, 26}, {23, 28}, {27}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {4}, {8}, {3}, {5, 16}, {6, 9}, {10}, {12, 17}, {7, 18}, {11, 20}, {13, 24}, {14, 19}, {21}, {22, 25}, {15, 26}, {28}, {23}, {27}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {4}, {8}, {3, 16}, {5}, {6, 9}, {10, 17}, {12, 18}, {7, 20}, {11, 24}, {13, 19}, {14, 21}, {22, 25}, {26}, {15, 28}, {23}, {27}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {4}, {8}, {16}, {3}, {5}, {6, 9}, {10, 17}, {12, 18}, {20}, {7, 24}, {11}, {13, 19}, {14, 21}, {22, 25}, {26}, {28}, {15}, {23}, {27}, {29}, {30}, {31}},
                                        {{0}, {1}, {2}, {4, 8}, {3, 16}, {5, 9}, {6, 10, 17}, {12, 18}, {7, 11, 20, 24}, {13, 19}, {14, 21, 25}, {22, 26}, {15, 28}, {23, 27}, {29}, {30}, {31}},
                                        {{0}, {1}, {2, 4}, {3, 5}, {6}, {7, 8}, {9}, {10, 12}, {11, 13, 16}, {14, 17}, {15, 18, 20}, {19, 21}, {22}, {23, 24}, {25}, {26, 28}, {27, 29}, {30}, {31}},
                                        {{0}, {1}, {2, 4}, {3, 5}, {6}, {7, 8}, {9, 16}, {10, 12, 17}, {11, 13, 18, 20}, {14, 19, 21}, {15, 22}, {23, 24}, {25}, {26, 28}, {27, 29}, {30}, {31}},
                                        {{0}, {1}, {2, 4}, {3, 5}, {6, 8}, {7, 9}, {10, 12}, {11, 13, 16}, {14, 17}, {15, 18, 20}, {19, 21}, {22, 24}, {23, 25}, {26, 28}, {27, 29}, {30}, {31}},
                                        {{0}, {1}, {2, 4}, {3, 5}, {6, 8}, {7, 9, 16}, {10, 12, 17}, {11, 13, 18, 20}, {14, 19, 21}, {15, 22, 24}, {23, 25}, {26, 28}, {27, 29}, {30}, {31}},
                                        {{0}, {1}, {2, 4}, {3, 5}, {8}, {6, 9}, {7, 16}, {10, 12, 17}, {11, 13}, {18, 20}, {14, 19, 21}, {15, 24}, {22, 25}, {23}, {26, 28}, {27, 29}, {30}, {31}},
                                        {{0}, {1}, {2, 4}, {3, 5, 8}, {6, 9}, {7, 10, 12}, {11, 13}, {14}, {15, 16}, {17}, {18, 20}, {19, 21, 24}, {22, 25}, {23, 26, 28}, {27, 29}, {30}, {31}},
                                        {{0}, {1}, {2, 4}, {3, 5, 8}, {6, 9}, {7, 10, 12}, {11, 13}, {14, 16}, {15, 17}, {18, 20}, {19, 21, 24}, {22, 25}, {23, 26, 28}, {27, 29}, {30}, {31}},
                                        {{0}, {1}, {2, 4}, {3, 5, 8}, {6, 9}, {7, 10, 12}, {11, 13, 16}, {14, 17}, {15, 18, 20}, {19, 21, 24}, {22, 25}, {23, 26, 28}, {27, 29}, {30}, {31}},
                                        {{0}, {1}, {2, 4}, {3, 5, 8}, {6, 9}, {7, 10, 12, 16}, {11, 13, 17}, {14, 18, 20}, {15, 19, 21, 24}, {22, 25}, {23, 26, 28}, {27, 29}, {30}, {31}},
                                        {{0}, {1}, {2, 4}, {3, 5, 8}, {6, 9, 16}, {7, 10, 12, 17}, {11, 13, 18, 20}, {14, 19, 21, 24}, {15, 22, 25}, {23, 26, 28}, {27, 29}, {30}, {31}},
                                        {{0}, {1}, {2, 4}, {3, 5, 8}, {9, 16}, {6, 17}, {7, 10, 12}, {11, 13, 18, 20}, {19, 21, 24}, {14, 25}, {15, 22}, {23, 26, 28}, {27, 29}, {30}, {31}},
                                        {{0}, {1}, {2, 4}, {3, 5, 8, 16}, {6, 9, 17}, {7, 10, 12, 18, 20}, {11, 13, 19, 21, 24}, {14, 22, 25}, {15, 23, 26, 28}, {27, 29}, {30}, {31}},
                                        {{0}, {1}, {2, 4}, {8}, {3, 5}, {6, 9}, {10, 12}, {7, 16}, {11, 13}, {14, 17}, {18, 20}, {15, 24}, {19, 21}, {22, 25}, {26, 28}, {23}, {27, 29}, {30}, {31}},
                                        {{0}, {1}, {2, 4}, {8}, {3, 5, 16}, {6, 9}, {10, 12, 17}, {7, 18, 20}, {11, 13, 24}, {14, 19, 21}, {22, 25}, {15, 26, 28}, {23}, {27, 29}, {30}, {31}},
                                        {{0}, {1}, {2, 4}, {8}, {16}, {3, 5}, {6, 9}, {10, 12, 17}, {18, 20}, {7, 24}, {11, 13}, {14, 19, 21}, {22, 25}, {26, 28}, {15}, {23}, {27, 29}, {30}, {31}},
                                        {{0}, {1}, {2, 4}, {8, 16}, {3, 5}, {6, 9, 17}, {10, 12, 18, 20}, {7, 24}, {11, 13, 19, 21}, {14, 22, 25}, {26, 28}, {15, 23}, {27, 29}, {30}, {31}},
                                        {{0}, {1}, {2, 4, 8}, {3, 5, 9}, {6, 10, 12}, {7, 11, 13, 16}, {14, 17}, {15, 18, 20, 24}, {19, 21, 25}, {22, 26, 28}, {23, 27, 29}, {30}, {31}},
                                        {{0}, {1}, {2, 4, 8}, {3, 5, 9, 16}, {6, 10, 12, 17}, {7, 11, 13, 18, 20, 24}, {14, 19, 21, 25}, {15, 22, 26, 28}, {23, 27, 29}, {30}, {31}},
                                        {{0}, {1, 2}, {3}, {4}, {5, 6}, {7, 8}, {9, 10}, {11, 16}, {12, 17, 18}, {13, 14, 19}, {15, 20}, {21, 22}, {23, 24}, {25, 26}, {27}, {28}, {29, 30}, {31}},
                                        {{0}, {1, 2}, {3}, {4}, {5, 6}, {7, 8}, {9, 10}, {11, 16}, {17, 18}, {12, 19}, {13, 14}, {15, 20}, {21, 22}, {23, 24}, {25, 26}, {27}, {28}, {29, 30}, {31}},
                                        {{0}, {1, 2}, {3}, {4}, {5, 6}, {7, 8}, {9, 10, 16}, {11, 17, 18}, {12, 19}, {13, 14, 20}, {15, 21, 22}, {23, 24}, {25, 26}, {27}, {28}, {29, 30}, {31}},
                                        {{0}, {1, 2}, {3}, {4}, {5, 6, 8}, {7, 9, 10}, {11, 16}, {12, 17, 18}, {13, 14, 19}, {15, 20}, {21, 22, 24}, {23, 25, 26}, {27}, {28}, {29, 30}, {31}},
                                        {{0}, {1, 2}, {3}, {4}, {5, 6, 8}, {7, 9, 10}, {11, 16}, {17, 18}, {12, 19}, {13, 14}, {15, 20}, {21, 22, 24}, {23, 25, 26}, {27}, {28}, {29, 30}, {31}},
                                        {{0}, {1, 2}, {3}, {4}, {5, 6, 8}, {7, 9, 10, 16}, {11, 17, 18}, {12, 19}, {13, 14, 20}, {15, 21, 22, 24}, {23, 25, 26}, {27}, {28}, {29, 30}, {31}},
                                        {{0}, {1, 2}, {3}, {4, 8}, {5, 6, 9, 10}, {7, 11, 16}, {12, 17, 18}, {13, 14, 19}, {15, 20, 24}, {21, 22, 25, 26}, {23, 27}, {28}, {29, 30}, {31}},
                                        {{0}, {1, 2}, {3}, {4, 8}, {5, 6, 9, 10}, {7, 11, 16}, {17, 18}, {12, 19}, {13, 14}, {15, 20, 24}, {21, 22, 25, 26}, {23, 27}, {28}, {29, 30}, {31}},
                                        {{0}, {1, 2}, {3}, {4, 8}, {5, 6, 9, 10, 16}, {7, 11, 17, 18}, {12, 19}, {13, 14, 20, 24}, {15, 21, 22, 25, 26}, {23, 27}, {28}, {29, 30}, {31}},
                                        {{0}, {1, 2}, {3, 4}, {5, 6}, {7, 8}, {9, 10}, {11, 12}, {13, 14}, {15, 16}, {17, 18}, {19, 20}, {21, 22}, {23, 24}, {25, 26}, {27, 28}, {29, 30}, {31}},
                                        {{0}, {1, 2}, {3, 4}, {5, 6}, {7, 8}, {9, 10}, {11, 12}, {13, 14, 16}, {15, 17, 18}, {19, 20}, {21, 22}, {23, 24}, {25, 26}, {27, 28}, {29, 30}, {31}},
                                        {{0}, {1, 2}, {3, 4}, {5, 6}, {7, 8}, {9, 10}, {11, 12, 16}, {13, 14, 17, 18}, {15, 19, 20}, {21, 22}, {23, 24}, {25, 26}, {27, 28}, {29, 30}, {31}},
                                        {{0}, {1, 2}, {3, 4}, {5, 6}, {7, 8}, {9, 10, 16}, {11, 12, 17, 18}, {13, 14, 19, 20}, {15, 21, 22}, {23, 24}, {25, 26}, {27, 28}, {29, 30}, {31}},
                                        {{0}, {1, 2}, {3, 4}, {5, 6}, {7, 8, 16}, {9, 10, 17, 18}, {11, 12, 19, 20}, {13, 14, 21, 22}, {15, 23, 24}, {25, 26}, {27, 28}, {29, 30}, {31}},
                                        {{0}, {1, 2}, {3, 4}, {5, 6, 8}, {7, 9, 10}, {11, 12}, {13, 14}, {15, 16}, {17, 18}, {19, 20}, {21, 22, 24}, {23, 25, 26}, {27, 28}, {29, 30}, {31}},
                                        {{0}, {1, 2}, {3, 4}, {5, 6, 8}, {7, 9, 10}, {11, 12}, {13, 14, 16}, {15, 17, 18}, {19, 20}, {21, 22, 24}, {23, 25, 26}, {27, 28}, {29, 30}, {31}},
                                        {{0}, {1, 2}, {3, 4}, {5, 6, 8}, {7, 9, 10}, {11, 12, 16}, {13, 14, 17, 18}, {15, 19, 20}, {21, 22, 24}, {23, 25, 26}, {27, 28}, {29, 30}, {31}},
                                        {{0}, {1, 2}, {3, 4}, {5, 6, 8}, {7, 9, 10, 16}, {11, 12, 17, 18}, {13, 14, 19, 20}, {15, 21, 22, 24}, {23, 25, 26}, {27, 28}, {29, 30}, {31}},
                                        {{0}, {1, 2}, {3, 4}, {5, 6, 8, 16}, {7, 9, 10, 17, 18}, {11, 12, 19, 20}, {13, 14, 21, 22, 24}, {15, 23, 25, 26}, {27, 28}, {29, 30}, {31}},
                                        {{0}, {1, 2}, {3, 4, 8}, {5, 6, 9, 10}, {7, 11, 12}, {13, 14}, {15, 16}, {17, 18}, {19, 20, 24}, {21, 22, 25, 26}, {23, 27, 28}, {29, 30}, {31}},
                                        {{0}, {1, 2}, {3, 4, 8}, {5, 6, 9, 10}, {7, 11, 12}, {13, 14, 16}, {15, 17, 18}, {19, 20, 24}, {21, 22, 25, 26}, {23, 27, 28}, {29, 30}, {31}},
                                        {{0}, {1, 2}, {3, 4, 8}, {5, 6, 9, 10}, {7, 11, 12, 16}, {13, 14, 17, 18}, {15, 19, 20, 24}, {21, 22, 25, 26}, {23, 27, 28}, {29, 30}, {31}},
                                        {{0}, {1, 2}, {3, 4, 8}, {5, 6, 9, 10, 16}, {7, 11, 12, 17, 18}, {13, 14, 19, 20, 24}, {15, 21, 22, 25, 26}, {23, 27, 28}, {29, 30}, {31}},
                                        {{0}, {1, 2}, {3, 4, 8, 16}, {5, 6, 9, 10, 17, 18}, {7, 11, 12, 19, 20, 24}, {13, 14, 21, 22, 25, 26}, {15, 23, 27, 28}, {29, 30}, {31}},
                                        {{0}, {1, 2}, {4}, {3}, {5, 6}, {7, 8}, {16}, {9, 10}, {12, 17, 18}, {11, 20}, {13, 14, 19}, {21, 22}, {15}, {23, 24}, {25, 26}, {28}, {27}, {29, 30}, {31}},
                                        {{0}, {1, 2}, {4}, {3}, {5, 6}, {8}, {7, 16}, {9, 10}, {12, 17, 18}, {11, 20}, {13, 14, 19}, {21, 22}, {15, 24}, {23}, {25, 26}, {28}, {27}, {29, 30}, {31}},
                                        {{0}, {1, 2}, {4}, {3}, {5, 6, 8}, {16}, {7, 9, 10}, {12, 17, 18}, {11, 20}, {13, 14, 19}, {21, 22, 24}, {15}, {23, 25, 26}, {28}, {27}, {29, 30}, {31}},
                                        {{0}, {1, 2}, {4}, {3, 8}, {5, 6, 16}, {9, 10}, {7, 12, 17, 18}, {11, 20}, {13, 14, 19, 24}, {21, 22}, {15, 25, 26}, {23, 28}, {27}, {29, 30}, {31}},
                                        {{0}, {1, 2}, {4, 8}, {3, 16}, {5, 6, 9, 10}, {12, 17, 18}, {7, 11, 20, 24}, {13, 14, 19}, {21, 22, 25, 26}, {15, 28}, {23, 27}, {29, 30}, {31}},
                                        {{0}, {1, 2, 4}, {3, 5, 6}, {7, 8}, {9, 10, 12}, {11, 13, 14}, {15, 16}, {17, 18, 20}, {19, 21, 22}, {23, 24}, {25, 26, 28}, {27, 29, 30}, {31}},
                                        {{0}, {1, 2, 4}, {3, 5, 6}, {7, 8}, {9, 10, 12}, {11, 13, 14, 16}, {15, 17, 18, 20}, {19, 21, 22}, {23, 24}, {25, 26, 28}, {27, 29, 30}, {31}},
                                        {{0}, {1, 2, 4}, {3, 5, 6}, {7, 8}, {9, 10, 12, 16}, {11, 13, 14, 17, 18, 20}, {15, 19, 21, 22}, {23, 24}, {25, 26, 28}, {27, 29, 30}, {31}},
                                        {{0}, {1, 2, 4}, {3, 5, 6}, {7, 8, 16}, {9, 10, 12, 17, 18, 20}, {11, 13, 14, 19, 21, 22}, {15, 23, 24}, {25, 26, 28}, {27, 29, 30}, {31}},
                                        {{0}, {1, 2, 4}, {3, 5, 6, 8}, {7, 9, 10, 12}, {11, 13, 14}, {15, 16}, {17, 18, 20}, {19, 21, 22, 24}, {23, 25, 26, 28}, {27, 29, 30}, {31}},
                                        {{0}, {1, 2, 4}, {3, 5, 6, 8}, {7, 9, 10, 12}, {11, 13, 14, 16}, {15, 17, 18, 20}, {19, 21, 22, 24}, {23, 25, 26, 28}, {27, 29, 30}, {31}},
                                        {{0}, {1, 2, 4}, {3, 5, 6, 8}, {7, 9, 10, 12, 16}, {11, 13, 14, 17, 18, 20}, {15, 19, 21, 22, 24}, {23, 25, 26, 28}, {27, 29, 30}, {31}},
                                        {{0}, {1, 2, 4}, {3, 5, 6, 8, 16}, {7, 9, 10, 12, 17, 18, 20}, {11, 13, 14, 19, 21, 22, 24}, {15, 23, 25, 26, 28}, {27, 29, 30}, {31}},
                                        {{0}, {1, 2, 4}, {8, 16}, {3, 5, 6}, {9, 10, 12, 17, 18, 20}, {7, 24}, {11, 13, 14, 19, 21, 22}, {25, 26, 28}, {15, 23}, {27, 29, 30}, {31}},
                                        {{0}, {1, 2, 4, 8}, {3, 5, 6, 9, 10, 12}, {7, 11, 13, 14}, {15, 16}, {17, 18, 20, 24}, {19, 21, 22, 25, 26, 28}, {23, 27, 29, 30}, {31}},
                                        {{0}, {1, 2, 4, 8}, {3, 5, 6, 9, 10, 12}, {7, 11, 13, 14, 16}, {15, 17, 18, 20, 24}, {19, 21, 22, 25, 26, 28}, {23, 27, 29, 30}, {31}},
                                        {{0}, {1, 2, 4, 8}, {3, 5, 6, 9, 10, 12, 16}, {7, 11, 13, 14, 17, 18, 20, 24}, {15, 19, 21, 22, 25, 26, 28}, {23, 27, 29, 30}, {31}},
                                        {{0}, {1, 2, 4, 8, 16}, {3, 5, 6, 9, 10, 12, 17, 18, 20, 24}, {7, 11, 13, 14, 19, 21, 22, 25, 26, 28}, {15, 23, 27, 29, 30}, {31}}};

    dbg(orders_.size());
    dbg(orders_);

    int T;
    cin >> T;

    while (T--) {
        int N;
        cin >> N;

        vector<int> sets;
        REP(i, N) {
            int S = 0;
            REP(d, 5) {
                int a;
                cin >> a;
                S += a << d;
            }
            sets.push_back(S);
        }
        dbg(sets);
        vector<int> R(N);
        cin >> R;
        REP(i, N) R.at(i)--;
        // dbg(R);

        vector<pint> rank_sets;
        REP(i, N) rank_sets.emplace_back(R.at(i), sets.at(i));
        sort(ALL(rank_sets));
        dbg(rank_sets);
        // vector<int> ssets;
        // for (auto [r, s] : rank_sets) ssets.push_back(s);
        // dbg(ssets);

        lint min_cost = 1LL << 60;

        for (const auto &order : orders_) {
            vector<int> ranks(1 << 5);
            REP(i, order.size()) {
                for (const auto r : order.at(i)) ranks.at(r) = (int)order.size() - 1 - i;
            }
            dbg(ranks);

            const int ngrp = ranks.front() + 1;
            // vector<int> cntr(ngrp);
            vector<vector<int>> grps(ngrp);
            for (auto [r, s] : rank_sets) grps.at(ranks.at(s)).push_back(r);
            dbg(grps);

            int lo = 0;
            lint tmp_cost = 0;

            for (const auto &g : grps) {
                for (int x : g) {
                    lint diff = x - lo;
                    tmp_cost += diff * diff;
                    ++lo;
                }
            }

            chmin(min_cost, tmp_cost);
        }

        cout << min_cost << '\n';
    }
}
